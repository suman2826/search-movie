{"ast":null,"code":"/*!\n * array-slice <https://github.com/jonschlinkert/array-slice>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nmodule.exports = function slice(arr, start, end) {\n  var len = arr.length >>> 0;\n  var range = [];\n  start = idx(arr, start);\n  end = idx(arr, end, len);\n\n  while (start < end) {\n    range.push(arr[start++]);\n  }\n\n  return range;\n};\n\nfunction idx(arr, pos, end) {\n  var len = arr.length >>> 0;\n\n  if (pos == null) {\n    pos = end || 0;\n  } else if (pos < 0) {\n    pos = Math.max(len + pos, 0);\n  } else {\n    pos = Math.min(pos, len);\n  }\n\n  return pos;\n}","map":{"version":3,"sources":["D:/Mindfire/React/search-movie/node_modules/array-slice/index.js"],"names":["module","exports","slice","arr","start","end","len","length","range","idx","push","pos","Math","max","min"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,GAAf,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAC/C,MAAIC,GAAG,GAAGH,GAAG,CAACI,MAAJ,KAAe,CAAzB;AACA,MAAIC,KAAK,GAAG,EAAZ;AAEAJ,EAAAA,KAAK,GAAGK,GAAG,CAACN,GAAD,EAAMC,KAAN,CAAX;AACAC,EAAAA,GAAG,GAAGI,GAAG,CAACN,GAAD,EAAME,GAAN,EAAWC,GAAX,CAAT;;AAEA,SAAOF,KAAK,GAAGC,GAAf,EAAoB;AAClBG,IAAAA,KAAK,CAACE,IAAN,CAAWP,GAAG,CAACC,KAAK,EAAN,CAAd;AACD;;AACD,SAAOI,KAAP;AACD,CAXD;;AAcA,SAASC,GAAT,CAAaN,GAAb,EAAkBQ,GAAlB,EAAuBN,GAAvB,EAA4B;AAC1B,MAAIC,GAAG,GAAGH,GAAG,CAACI,MAAJ,KAAe,CAAzB;;AAEA,MAAII,GAAG,IAAI,IAAX,EAAiB;AACfA,IAAAA,GAAG,GAAGN,GAAG,IAAI,CAAb;AACD,GAFD,MAEO,IAAIM,GAAG,GAAG,CAAV,EAAa;AAClBA,IAAAA,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASP,GAAG,GAAGK,GAAf,EAAoB,CAApB,CAAN;AACD,GAFM,MAEA;AACLA,IAAAA,GAAG,GAAGC,IAAI,CAACE,GAAL,CAASH,GAAT,EAAcL,GAAd,CAAN;AACD;;AAED,SAAOK,GAAP;AACD","sourcesContent":["/*!\n * array-slice <https://github.com/jonschlinkert/array-slice>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function slice(arr, start, end) {\n  var len = arr.length >>> 0;\n  var range = [];\n\n  start = idx(arr, start);\n  end = idx(arr, end, len);\n\n  while (start < end) {\n    range.push(arr[start++]);\n  }\n  return range;\n};\n\n\nfunction idx(arr, pos, end) {\n  var len = arr.length >>> 0;\n\n  if (pos == null) {\n    pos = end || 0;\n  } else if (pos < 0) {\n    pos = Math.max(len + pos, 0);\n  } else {\n    pos = Math.min(pos, len);\n  }\n\n  return pos;\n}"]},"metadata":{},"sourceType":"script"}